<header id="main-header" class="header-default justify-center mx-auto py-5 top-0 w-full xl:w-[1120px] z-10 border">
  <div class="flex lg:hidden items-center w-full  justify-end border">
     <nav id="mobile-menu" class="md:hidden hidden px-3 pt-3 flex flex-col bg-black" aria-label="Mobile">
      <a class="a-link is-shown rounded-xl px-3 py-2 hover:bg-white/10" href="#top">Home</a>
      <a class="a-link is-shown rounded-xl px-3 py-2 hover:bg-white/10" href="#Technologies">Technologies</a>
      <a class="a-link is-shown rounded-xl px-3 py-2 hover:bg-white/10" href="#Projects">Projects</a>
      <a class="a-link is-shown rounded-xl px-3 py-2 hover:bg-white/10" href="#Certificates">Certificates</a>
      <a class="a-link is-shown rounded-xl px-3 py-2 hover:bg-white/10" href="#About_me">About me</a>
    </nav>
    <button id="menu-toggle"
            class=" inline-flex items-center rounded-xl p-2 w-25 bg-[#3e3e3e] focus:outline-none"
            aria-controls="mobile-menu"
            aria-expanded="false"
            aria-label="Open main menu">
      <!-- Ícono (SVG) -->
      <svg id="icon-open" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
      </svg>
    </button>
  </div>

  <nav id="navbar" class="hidden lg:flex flex-wrap justify-center items-center px-3 text-sm font-medium">
    <a class="a-link is-shown hover:bg-white/10 rounded-full px-3 py-1 transition text-base md:text-md" href="#top">Home</a>
    <a class="a-link is-shown hover:bg-white/10 rounded-full px-3 py-1 transition text-base md:text-md" href="#Technologies">Technologies</a>
    <a class="a-link is-shown hover:bg-white/10 rounded-full px-3 py-1 transition text-base md:text-md" href="#Projects">Projects</a>
    <a class="a-link is-shown hover:bg-white/10 rounded-full px-3 py-1 transition text-base md:text-md" href="#Certificates">Certificates</a>
    <a class="a-link is-shown hover:bg-white/10 rounded-full px-3 py-1 transition text-base md:text-md" href="#About_me">About me</a>
  </nav>


</header>
<style>
.header-default { /* nav horizontal */
    width: 100%; 
    position: fixed; 
    top: 0; 
    display: flex; 
    align-items: center;
    padding: 1rem; 
    transition: all 100ms;
  }
  .header-sidebar { /* nav sidebar */
    position: fixed; 
    width: 12rem; 
    display: flex; 
    flex-direction: column; 
    align-items: center;
    transition: all 300ms;
  }
  .nav-side {
    display: flex; 
    flex-direction: column; 
    align-items: center; 
    gap: 1.5rem;
  }

  .a-link {
    transition: opacity 900ms ease-in-out;
    opacity: 1;
  }
  .is-hidden { opacity: 0; }
  .is-shown  { opacity: 1; }

  .header-default .a-link { color: white; }
  .header-sidebar .a-link { color: white; } 
</style>
<script>
(function () {
    const header  = document.getElementById('main-header');
    const navbar  = document.getElementById('navbar');
    const links   = Array.from(navbar.querySelectorAll('.a-link'));
    const mobileMenu  = document.getElementById('mobile-menu');  // móvil
    const btnToggle   = document.getElementById('menu-toggle');
    const iconOpen    = document.getElementById('icon-open');
    const iconClose   = document.getElementById('icon-close');

    const THRESHOLD = 40;         
    let isSidebar   = false;       
    let isAnimating = false;
    
 function closeMobileMenu() {
      mobileMenu.classList.add('hidden');
      btnToggle.setAttribute('aria-expanded', 'false');
      iconOpen.classList.remove('hidden');
      iconClose.classList.add('hidden');
    }
    function openMobileMenu() {
      mobileMenu.classList.remove('hidden');
      btnToggle.setAttribute('aria-expanded', 'true');
      iconOpen.classList.add('hidden');
      iconClose.classList.remove('hidden');
    }
    function toggleMobileMenu() {
      const isOpen = btnToggle.getAttribute('aria-expanded') === 'true';
      isOpen ? closeMobileMenu() : openMobileMenu();
    }

    // Cierra menú si haces click en un link móvil
    mobileMenu.addEventListener('click', (e) => {
      const target = e.target;
      if (target.tagName === 'A') closeMobileMenu();
    });

    // Cierra menú si pasas a escritorio (>= md)
    const mq = window.matchMedia('(min-width: 768px)');
    mq.addEventListener('change', (e) => {
      if (e.matches) closeMobileMenu(); // estamos en escritorio
    });

    btnToggle.addEventListener('click', toggleMobileMenu);

    function applyNavLayout(toSidebar) {
      navbar.classList.toggle('nav-side', toSidebar);
      header.classList.toggle('header-sidebar', toSidebar);
      header.classList.toggle('header-default', !toSidebar);
    }

    function swapLayout(toSidebar) {
      if (isAnimating || toSidebar === isSidebar) return;
      isAnimating = true;

      links.forEach(a => { a.classList.remove('is-shown'); a.classList.add('is-hidden'); });

      const onFadeOutEnd = () => {
        links[0].removeEventListener('transitionend', onFadeOutEnd);

        applyNavLayout(toSidebar);

        requestAnimationFrame(() => {
          links.forEach(a => { a.classList.remove('is-hidden'); a.classList.add('is-shown'); });

          const onFadeInEnd = () => {
            links[0].removeEventListener('transitionend', onFadeInEnd);
            isAnimating = false;
            isSidebar = toSidebar;
          };
          links[0].addEventListener('transitionend', onFadeInEnd, { once: true });
        });
      };
      links[0].addEventListener('transitionend', onFadeOutEnd, { once: true });
    }

    const startSidebar = (window.scrollY || 0) > THRESHOLD;
    applyNavLayout(startSidebar);
    isSidebar = startSidebar;

    window.addEventListener('scroll', () => {
      const toSidebar = (window.scrollY || 0) > THRESHOLD;
      if (toSidebar !== isSidebar) swapLayout(toSidebar);
    }, { passive: true });
  })();

/*
  This section controls the transition between the two navigation layouts. The logic ensures that every time the scroll crosses a certain threshold, the navigation links fade out, the layout switches smoothly, and then the links fade back in.
  It was necessary to use plain CSS classes cause Tailwind’s build process removes unused classes by default. By defining small custom classes in plain CSS, we ensure that the transitions (fade in/out) always work consistently
*/
</script>
